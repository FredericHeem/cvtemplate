{"version":3,"sources":["App.js","serviceWorker.js","index.js","email.svg","location.svg"],"names":["experienceFake","company","faker","companyName","jobTitle","duties","sentence","content","basicInfo","firstName","lastName","city","email","experience","summary","paragraph","languages","name","level","educations","description","word","issuer","endYear","skills","category","items","experiences","console","log","Summary","css","SkillSection","skill","map","item","join","Languages","language","key","Skills","Experience","duty","Experiences","Education","education","Educations","BasicInfo","info","alt","src","emailSvg","width","locationSvg","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.0f296cd8.chunk.js","sourcesContent":["/** @jsx jsx */\nimport { jsx, css } from \"@emotion/core\";\nimport \"./App.css\";\nimport * as faker from \"faker\";\nimport emailSvg from \"./email.svg\";\nimport locationSvg from \"./location.svg\";\n\nconst experienceFake = () => ({\n  company: faker.company.companyName(),\n  jobTitle: faker.name.jobTitle(),\n  duties: [faker.lorem.sentence(), faker.lorem.sentence()]\n});\n\nconst content = {\n  basicInfo: {\n    firstName: faker.name.firstName(),\n    lastName: faker.name.lastName(),\n    city: faker.address.city(),\n    email: faker.internet.email(),\n    experience: faker.name.jobTitle()\n  },\n  summary: faker.lorem.paragraph(),\n  languages: [\n    { name: \"English\", level: \"Fluent\" },\n    { name: \"German\", level: \"Conversional\" },\n    { name: \"Venetian\", level: \"Fluent\" }\n  ],\n  educations: [\n    {\n      name: \"Master of Science\",\n      description: faker.lorem.word(),\n      issuer: faker.lorem.word(),\n      endYear: \"2010\"\n    }\n  ],\n  skills: [\n    {\n      category: \"Frontend\",\n      items: [{ name: \"React\" }, { name: \"CSS\" }, { name: \"D3\" }]\n    },\n    {\n      category: \"Backend\",\n      items: [\n        { name: \"Node\" },\n        { name: \"Kotlin\" },\n        { name: \"C++\" },\n        { name: \"Java\" }\n      ]\n    },\n    {\n      category: \"Methodologies\",\n      items: [{ name: \"Agile\" }, { name: \"Lean\" }, { name: \"Scrum\" }]\n    },\n    {\n      category: \"Databases\",\n      items: [{ name: \"Postgres\" }, { name: \"Oracle\" }, { name: \"Mysql\" }]\n    },\n    {\n      category: \"DevOps\",\n      items: [{ name: \"Docker\" }, { name: \"Ansible\" }, { name: \"Chef\" }]\n    }\n  ],\n  experiences: [\n    experienceFake(),\n    experienceFake(),\n    experienceFake(),\n    experienceFake()\n  ]\n};\nconsole.log(faker);\nconst Summary = ({ summary }) => (\n  <section\n    css={css`\n      grid-area: su;\n      padding: 1rem 0;\n    `}\n  >\n    <h3>Summary</h3>\n    {summary}\n  </section>\n);\n\nconst SkillSection = ({ skill = {} }) => (\n  <tr\n    css={css`\n      td {\n        font-weight: 500;\n      }\n    `}\n  >\n    <th>{skill.category}</th>\n    <td>{skill.items.map(item => item.name).join(\", \")}</td>\n  </tr>\n);\n\nconst Languages = ({ languages = [] }) => (\n  <section\n    css={css`\n      grid-area: la;\n    `}\n  >\n    <h3>Languages</h3>\n    <table\n      css={css`\n        th {\n          text-align: left;\n          color: gray;\n          padding: 0.3rem 2rem 0.3rem 0;\n        }\n        td {\n          padding: 0.3rem 1rem 0.3rem 0;\n        }\n      `}\n    >\n      <thead>\n        <tr>\n          {languages.map((language, key) => (\n            <th key={key}>{language.name}</th>\n          ))}\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          {languages.map((language, key) => (\n            <td key={key}>{language.level}</td>\n          ))}\n        </tr>\n      </tbody>\n    </table>\n  </section>\n);\n\nconst Skills = ({ skills = [] }) => (\n  <section\n    css={css`\n      grid-area: sk;\n    `}\n  >\n    <h3>Skills</h3>\n    <table\n      css={css`\n        th {\n          text-align: left;\n          color: gray;\n          padding: 0.3rem 0.3rem 0.3rem 0;\n          margin: 1rem;\n        }\n      `}\n    >\n      <tbody>\n        {skills.map((skill, key) => (\n          <SkillSection key={key} skill={skill} />\n        ))}\n      </tbody>\n    </table>\n  </section>\n);\n\nconst Experience = ({ experience }) => (\n  <div\n    css={css`\n      padding: 0.5rem 0;\n    `}\n  >\n    <h4>{experience.jobTitle}</h4>\n    <h5>{experience.company}</h5>\n    <ul>\n      {experience.duties.map((duty, key) => (\n        <li key={key}>{duty}</li>\n      ))}\n    </ul>\n  </div>\n);\nconst Experiences = ({ experiences }) => (\n  <section\n    css={css`\n      grid-area: ex;\n    `}\n  >\n    <h3>Experiences</h3>\n    <div>\n      {experiences.map((experience, key) => (\n        <Experience experience={experience} key={key} />\n      ))}\n    </div>\n  </section>\n);\n\nconst Education = ({ education }) => (\n  <div\n    css={css`\n      padding: 0.5rem 0;\n    `}\n  >\n    <div\n      css={css`\n        color: gray;\n        font-weight:bold;\n        font-size: 1.2rem;\n        padding-bottom:0.5rem;\n      `}\n    >\n      {education.name}\n    </div>\n    <div\n      css={css`\n        display: flex;\n        > div {\n          padding-right: 0.5rem;\n        }\n        font-size: 1.2rem;\n      `}\n    >\n      <div>{education.issuer}</div>\n      <div\n        css={css`\n          font-weight: 300;\n        `}\n      >\n        {education.endYear}\n      </div>\n    </div>\n  </div>\n);\n\nconst Educations = ({ educations = [] }) => (\n  <section\n    css={css`\n      grid-area: ed;\n    `}\n  >\n    <h3>Educations</h3>\n    <div>\n      {educations.map((education, key) => (\n        <Education education={education} key={key} />\n      ))}\n    </div>\n  </section>\n);\n\nconst BasicInfo = ({ info }) => (\n  <section\n    css={css`\n      grid-area: in;\n    `}\n  >\n    <div\n      css={css`\n        display: flex;\n        justify-content: space-between;\n        align-content: flex-start;\n        align-items: flex-start;\n      `}\n    >\n      <div\n        css={css`\n          > div {\n            padding: 0.5rem 0;\n          }\n        `}\n      >\n        <h1>\n          {info.firstName} {info.lastName}\n        </h1>\n        <div\n          css={css`\n            font-size: 1.3rem;\n          `}\n        >\n          {info.experience}\n        </div>\n      </div>\n      <div\n        css={css`\n          > div {\n            display: flex;\n            align-items: center;\n            img {\n              padding: 0.6rem;\n            }\n          }\n        `}\n      >\n        <div>\n          <img alt=\"email\" src={emailSvg} width=\"20\" />\n          <span>{info.email}</span>\n        </div>\n        <div>\n          <img alt=\"location\" src={locationSvg} width=\"20\" />\n          <span>{info.city}</span>\n        </div>\n      </div>\n    </div>\n  </section>\n);\n\nfunction App() {\n  return (\n    <main\n      css={css`\n        background: white;\n        height: 100vh;\n        font-size: 18px;\n        box-sizing: border-box;\n        max-width: 800px;\n        margin: auto;\n        display: grid;\n        grid-template-columns: repeat(2, 1fr);\n        grid-auto-rows: minmax(min-content, max-content);\n        grid-template-areas:\n          \"in in\"\n          \"su su\"\n          \"sk sk\"\n          \"ex ex\"\n          \"ed la\";\n\n        * {\n          margin: 0;\n          padding: 0;\n        }\n        section {\n          padding: 1rem 0 1rem 0;\n          border-bottom: 1px dashed lightgray;\n        }\n        h1,\n        h2,\n        h3 {\n          padding-bottom: 0.3rem;\n          color: darkblue;\n          text-transform: uppercase;\n        }\n        h4,\n        h5 {\n          padding-bottom: 0.3rem;\n        }\n        ul {\n          padding: 0.2rem 2rem;\n        }\n      `}\n    >\n      <BasicInfo info={content.basicInfo} />\n      <Languages languages={content.languages} />\n      <Summary summary={content.summary} />\n      <Skills skills={content.skills} />\n      <Experiences experiences={content.experiences} />\n      <Educations educations={content.educations} />\n      {/*JSON.stringify(content, null, 4)*/}\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/email.58185b30.svg\";","module.exports = __webpack_public_path__ + \"static/media/location.7994930a.svg\";"],"sourceRoot":""}